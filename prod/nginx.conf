events {
  worker_connections 768;
}
http {
  upstream minigridserver {
    server minigrid:8888;
  }
  include /etc/nginx/mime.types;
  server {
    listen 80;
    listen [::]:80;
    server_name www.example.com;
    location = /device_info {
      proxy_pass_header Server;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_pass http://minigridserver;
    }
    location / {
      rewrite ^/(.*) https://$server_name/$1 permanent;
    }
  }
  server {
    server_name www.example.com;
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    ssl_dhparam /etc/letsencrypt/live/www.example.com/dhparam.pem;
    ssl_certificate /etc/letsencrypt/live/www.example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/www.example.com/privkey.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_protocols TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK';
    ssl_prefer_server_ciphers on;
    add_header Strict-Transport-Security max-age=15768000;
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/letsencrypt/live/www.example.com/chain.pem;

    location '/.well-known/acme-challenge' {
      default_type "text/plain";
      root /tmp/letsencrypt;
    }

    location ^~ /static/dist/ {
      root /var/www;
      if ($query_string) {
        expires max;
      }
    }

    location = /favicon.png {
      root /var/www/static;
      if ($query_string) {
        expires max;
      }
    }

    location = /robots.txt {
      root /var/www/static;
      if ($query_string) {
        expires max;
      }
    }

    location = /static/manifest.json {
      root /var/www;
    }

    // Note that this is a temporary URL... and I'm not sure that it works either
    // https://github.com/sockjs/sockjs-node#websocket-compatible-load-balancer
    // https://github.com/sockjs/sockjs-node/blob/master/examples/haproxy.cfg
    location /ws {
      proxy_pass http://minigridserver;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
    }

    location / {
      proxy_pass_header Server;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_pass http://minigridserver;
    }
  }
}
